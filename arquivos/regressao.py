"""Desafio_Rocketmat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XJhOd4ilGbwx7QrKXTry7HQf6TXiXJ_Y

# **Regressão Logística**

A Regressão Logística é uma técnica estatística que permite estimar a probabilidade associada à ocorrência de determinado evento. É um modelo que permite a predição de valores tomados por uma variável categórica, frequentemente binária.

* Objetivo :Qual é a probabilidade de ocorrer um acidente de trabalho?

Raciocínio

O aumento da média de horas trabalhando em uma empresa pode afetar a produtividade, bem como pode comprometer com a qualidade do trabalho e com o cansaço, portanto, maiores deficits de atenção
Em relação a variável a promotion_last_5years, pode conjecturar que obter uma promoção no trabalho, pode influenciar de certa forma na pressão de entregas de trabalho,similar ao mesmo pensamento foi construido com base no salário e na posição de trabalho

Resultado

Obtive um resultado abaixo do esperado, embora a métrica do modelo foi alto.
Hipótese é que há uma necessidade maior de pré-processamento dos dados e compreender melhor as variáveis disponíveis, contudo, não há uma explicação disponível.
Além disso, conjectura que provavelmente é uma empresa que não tem indústria ou os funcionários inseridos não trabalham em áreas de indústrias ou em regiões com nivel de segurança máxima.Dessa forma, a probabilidade de ocorrência de acidente é baixa, tendo em vista que o modelo calcula valores iguais a zero para a totalidade dos dados analisados
Contudo, a hipótese que acredito é por que os dados estão desbalanceados, pode-se notar que há 1 - 14%
0 - 86%.
"""

# Importar as Bibliotecas Necessárias

import pandas as pd
import numpy as np
from sklearn import tree
from sklearn.tree import DecisionTreeRegressor
from sklearn import metrics
import pydot
import graphviz
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import roc_auc_score, roc_curve, classification_report,\
                            accuracy_score, confusion_matrix, auc

# Importar o Arquivo e realizar a leitura

dados = pd.read_csv('dados/hr.csv')
dados.head()

# Remoção de algumas colunas que não são tão relevantes para a análise e verificar se foram removidas

dados.drop('Name', inplace = True, axis = 1)
dados.drop('ID', inplace = True, axis =1 )

dados.head()

# Verificar quais os tipos de variáveis

dados.dtypes

# Realizar as transformações necessárias para a realização de Regressão Logística.
# Hipotetizou esse tipo de Hierarquia, uma vez que não tem informações sobre o Dataset.

dados["salary"].replace({"low": 1, "medium":2, "high":3}, inplace=True)
dados['Role'].replace({"VP":7, "Director":6,"Manager":5,"Senior Director":4,"Senior Manager":3,"Level 2-4":2,
                      "Level 1":1}, inplace = True)

# Verificando se ocorreram as transformações realizadas
dados.dtypes

"""Hipotetizou algumas variáveis que poderiam influenciar na probabilidade de acidentes de tránsito no trabalho.


* Variáveis Independentes: average_montly_hours,promotion_last_5years,salary,time_spend_company,Role.

* Variável Target: Work_accident.
"""

# Inserindo os Dados de Treinamento com 70%

X_train_data = dados[['average_montly_hours','promotion_last_5years','salary','time_spend_company','Role']].iloc[0:9000,:]
Y_train_data = dados[['Work_accident']].iloc[0:9000,:]

# Inserindo os Dados de Testes com 30%

X_test_data = dados[['average_montly_hours','promotion_last_5years','salary','time_spend_company','Role']].iloc[9001:14999,:]
Y_test_data = dados[['Work_accident']].iloc[9001:14999,:]

# Treinando o modelo de Regressão Logistica

lr = LogisticRegression()
model = lr.fit(X_train_data,Y_train_data.values.ravel())

# Realizando a Matriz de Confusão 
matriz = confusion_matrix(Y_test_data, model.predict(X_test_data))

# Avaliando a acurácia do modelo

acuracia = accuracy_score(Y_test_data, model.predict(X_test_data))

print("Regression score: ", score)

"""Métricas de Avaliação:

* Precision: É a capacidade de não prever uma instância negativa como positiva, ou seja, não comete o erro do tipo 1

* Recall: É a capacidade do modelo de encontrar todas as instâncias positivas.

* Métrica F1 é uma média harmônica de Precision e Recall
"""

# Printar outras métricas para verificar como está o modelo
print(classification_report(Y_test_data, model.predict(X_test_data)))

# Calcular a predição do modelo

Y_pred = lr.predict(X_test_data)

print(Y_pred)
